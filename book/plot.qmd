# Визуализации

## Графические системы 

В R есть несколько графических систем: базовый R, `lattice` и `ggplot2`. В этом курсе мы будем работать лишь с ggplot2 как с наиболее современной. Если вам интересны первые две, то вы можете обратиться к [версии](https://locusclassicus.github.io/text_analysis_2023/%D0%B2%D0%B8%D0%B7%D1%83%D0%B0%D0%BB%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8.html) курса 2023/2024 г. 

Упражнения `swirl`, направленные на освоение первых двух систем, выполнять не обязательно. Однако их прохождение поможет лучше понять "графическую идиоматику" R. 

:::{.callout-warning icon=false}
Снова запустите `swirl()`; курс `R Programming` у вас уже установлен. Из него сделайте урок 15 `Base Graphics`. 
:::

:::{.callout-warning icon=false}
Установите курс `swirl::install_course("Exploratory Data Analysis")`. Снова запустите `swirl()`, выберите этот курс и пройдите из него уроки 1 `Principles of Analytic Graphs`; 2 `Exploratory Graphs`; 6 `Lattice Plotting System`. 
:::


Мы также не будем использовать функцию `qplot()`, потому что в новых версиях `ggplot2` ее использование не рекомендуется. Если хотите ее освоить, то `swirl` вам в помощь.

::::{.callout-warning icon=false}
Запустите `swirl()`, выберите курс "Exploratory Data Analysis" и пройдите из него уроки 4 `Plotting Systems` и 8 `GGPlot2 Part1`.
::::


Настоящая графическая сила R -- это пакет `ggplot2`. В его основе лежит идея "грамматики графических элементов" Лиланда Уилкинсона [@мастицкий2017] (отсюда "gg" в названии). С одной стороны, вы можете постепенно достраивать график, добавляя элемент за элементом (как в базовом R); с другой -- множество параметров подбираются автоматически, как в Lattice. Именно с ней мы будем работать в первую очередь.

## Датасет: метаданные романов XIX-XX вв. 

Знакомиться с `ggplot2` мы будем на примере датасета из коллекции ["NovelTM Datasets for English-Language Fiction, 1700-2009"](https://www.pure.ed.ac.uk/ws/portalfiles/portal/342927125/UnderwoodEtal2020JCANovelTMDatasets.pdf), подготовленного Тедом Андервудом, Патриком Кимутисом и Джессикой Уайт.  Они собрали метаданные о 210,266 томах художественной прозы в HathiTrust Digital Library и составили из них несколько датасетов.

Мы возьмем небольшой [датасет](https://github.com/tedunderwood/noveltmmeta/tree/master/metadata), который содержит провернные вручную метаданные, а также сведения о категории художественной прозы для 2,730 произведений, созданных в период 1799-2009 г. (равные выборки для каждого года). Об особенностях сбора и подготовки данных можно прочитать по [ссылке](https://www.pure.ed.ac.uk/ws/portalfiles/portal/342927125/UnderwoodEtal2020JCANovelTMDatasets.pdf). Нужный нам файл (в формате tsv) [скопирован] в репозиторий курса.

```{r eval = FALSE}
url <- "https://github.com/locusclassicus/text_analysis_2024/raw/main/files/manual_title_subset.tsv"
download.file(url, destfile = "../files/manual_title_subset.tsv")
```

Прежде всего избавимся от лишних столбцов и посмотрим на  данные.

```{r message=FALSE}
library(tidyverse)
noveltm <- read_tsv("../files/manual_title_subset.tsv")

noveltm <- noveltm |> 
  select(author, inferreddate, latestcomp, gender, nationality, shorttitle, category)

noveltm
```

Эти данные подходят для того, чтобы проверить наблюдение, сделанное Франко Моретти относительно длины названий романов. В статье "Корпорация стиля: размышления о 7 тысячах заглавий (британские романы 1740-1850)" (2009 г., рус. перевод в книге "Дальнее чтение", 2016 г.). Моретти заметил, что на протяжении XVIII-XIX вв. названия становятся короче, причем уменьшается не только среднее, но и стандартное отклонение (т.е. разброс значений). Правда, в наших данных есть не только романы и не только британские, но тем более интересно сравнить результат.

Для отражения связи между двумя переменными (год и длина) подойдет диаграмма рассеяния. В наших данных сведения о публикации хранятся в столбце `inferreddate`, а названия -- в столбце `shorttitle`. Прежде всего надо посчитать количество слов в названии: для этого можно посчитать количество пробелов и добавить единицу.  

```{r}
noveltm <- noveltm |> 
  mutate(n_words = str_count(shorttitle, " "))

noveltm
```
Мы готовы приступить к созданию первого графика.

##  Зависимости

Функция `ggplot()` имеет два основных аргумента: `data` и `mapping`. Аргумент `mapping` задает эстетические атрибуты геометрических объектов. Обычно используется в виде `mapping = aes(x, y)`, где `aes()` означает  aesthetics. 

Под "эстетикой" подразумеваются графические атрибуты, такие как размер, форма или цвет. Вы не увидите их на графике, пока не добавите какие-нибудь "геомы" --  геометрические объекты (точки, линии, столбики и т.п.). Эти объекты могут слоями накладываться друг на друга [@wickham2016]. Диаграмма рассеяния создается при помощи  `geom_point()`.  Попробуем настройки по умолчанию.

```{r warning=FALSE}
noveltm |> 
  ggplot(aes(inferreddate, n_words)) + 
  geom_point()
```

Упс. Точек очень много, и они накладываются друг на друга, т.к. число слов -- дискретная величина. Поступим так же, как Моретти, который отразил на графике среднее для каждого года. Для этого нам надо снова поколдовать над данными.

```{r}
noveltm_summary <- noveltm |>
  group_by(inferreddate) |>
  summarise(n = n(),
            mean_w = mean(n_words, na.rm = TRUE)) |> 
  filter(n > 1)

noveltm_summary
```

Снова попробуем изобразить. Добавим линию тренда, изменим внешний вид точек и тему оформления, а также уберем подпись оси X.

```{r message=FALSE}
noveltm_summary |> 
  ggplot(aes(inferreddate, mean_w)) +
  geom_point(color = "steelblue", alpha = 0.7, size = 2) +
  geom_smooth(color = "tomato") + 
  theme_bw() +
  xlab(NULL)
```

Хорошо прослеживается нисходящая тенденция, о которой писал Моретти.  

::::{.callout-warning icon=false}
Запустите `swirl()`, выберите курс "Exploratory Data Analysis" и пройдите из него урок 9 `GGPlot2 Part2`.
::::

Правда или ложь?

::::{.callout-tip icon=false}
На одной диаграмме может быть несколько геомов.
::::

```{r echo=FALSE, results='asis'}
library(checkdown)
check_question("Правда", options = c("Правда", "Ложь"), type = "select", right = "✅", wrong =  "❌")
```

::::{.callout-tip icon=false}
_Все_ эстетические атрибуты для _всех_ геомов задаются при вызове `ggplot()`.
::::

```{r echo=FALSE, results='asis'}
check_question("Ложь", options = c("Правда", "Ложь"), type = "select", right = "✅", wrong =  "❌")
```

::::{.callout-tip icon=false}
Отметьте все термины "грамматики графических элементов" `ggplot2`.
::::

```{r echo=FALSE, results='asis'}
check_question(answer = c("данные", "геометрические объекты", "статистические преобразования", "шкалы", "системы координат", "фасеты"), options = c("данные", "геометрические объекты", "статистические преобразования", "шкалы", "системы координат", "фасеты"), type = "checkbox", right = "Всемогущая гебдомада!", wrong =  "Это еще не все.")
```


## Сравнение двух групп

В столбце `nationality` хранятся данные о происхождении писателя. 

```{r}
noveltm |> 
  group_by(nationality) |> 
  summarise(n = n()) |> 
  arrange(-n)
```

Отберем только английских и американских авторов и сравним тенденции в этих двух группах. 

```{r message=FALSE}
noveltm_nation <- noveltm |> 
  filter(nationality %in% c("uk", "us")) |> 
  group_by(nationality, inferreddate) |> 
  summarise(n = n(),
            mean_w = mean(n_words, na.rm = TRUE)) |> 
  filter(n > 1) |> 
  select(-n)

noveltm_nation
```

Теперь сравним две группы графически, а также добавим заголовок и подзаголовок.

```{r}
noveltm_nation |> 
  ggplot(aes(inferreddate, mean_w, color = nationality)) +
  geom_point(alpha = 0.7, size = 1.5) +
  geom_smooth() +
  theme_bw() +
  labs(
    title = "Title Length in UK and US",
    subtitle = "NovelTM Data 1800-2009",
    x = NULL
  )
  
```

## Цветовые шкалы

`Ggplot2` дает возможность легко поменять цветовую палитру и шрифтовое оформление, а также добавить фон.  

Шкалы ColorBrewer `scale_color_brewer()` и `scale_fill_brewer()` позволяют использовать специально подобранные палитры хорошо сочетаемых цветов. Посмотреть эти шкалы можно на сайте <https://colorbrewer2.org>. 


::::{.callout-warning icon=false}
Запустите `swirl()`, выберите курс "Exploratory Data Analysis" и пройдите из него урок 7 `Working with Colors`. Это необязательно, но поможет лучше понять, как устроена работа с цветом в R. 
::::


Общее правило для выбора таково. 

- Если дана качественная переменная с упорядоченными уровнями (например, "холодный", "теплый", "горячий") или количественная переменная, и необходимо подчеркнуть разницу между высокими и низкими значениями, то для визуализации подойдет последовательная шкала.

- Если дана количественная переменная с осмысленным  средним значением, например нулем, 50%, медианой, целевым показателем и т.п., то выбираем расходящуюся шкалу. 

- Если дана качественная переменная, уровни которой невозможно упорядочить (названия городов, имена авторов и т.п.), ищем качественную шкалу.  

![[Источник.](https://blog.datawrapper.de/diverging-vs-sequential-color-scales/)](https://blog.datawrapper.de/wp-content/uploads/2021/03/full-210101_colorscales24-1536x356.png).

У нас две качественные группы, поэтому выбираем качественную шкалу. На рисунке они посредине (в R есть и другие шкалы, но пока о них не будет). Цвета можно задавать и вручную по [названию](https://r-graph-gallery.com/42-colors-names.html) или коду.

![](https://r-graph-gallery.com/38-rcolorbrewers-palettes_files/figure-html/thecode-1.png)

```{r}
noveltm_nation |> 
  ggplot(aes(inferreddate, mean_w, color = nationality)) +
  geom_point(alpha = 0.7, size = 1.5) +
  geom_smooth(se = FALSE) +
  theme_bw() +
  labs(
    title = "Title Length in UK and US",
    subtitle = "NovelTM Data 1800-2009",
    x = NULL) +
  scale_color_brewer(palette = "Dark2")

  
```

## Шрифты 

Пакет `ggplot2` и расширения для него дают возможность использовать пользовательские шрифты.

```{r message=FALSE}
library(showtext)
font_add_google("Special Elite", family = "special")
showtext_auto()

noveltm_nation |> 
  ggplot(aes(inferreddate, mean_w, color = nationality)) +
  geom_point(alpha = 0.7, size = 1.5) +
  geom_smooth(se = FALSE) +
  theme_bw() +
  labs(
    title = "Title Length in UK and US",
    subtitle = "NovelTM Data 1800-2009",
    x = NULL) +
  scale_color_brewer(palette = "Dark2") + 
  theme(
    axis.title = element_text(family = "special"),
    title = element_text(family = "special")
  )
  
```

## Изображения 

Изображения можно добавлять и в качестве фона, и вместо отдельных геомов, например точек. 

```{r warning=FALSE}
library(ggimage)
url <- "./images/book.jpg"

font_add_google("Special Elite", family = "special")
showtext_auto()


g <- noveltm_nation |> 
  ggplot(aes(inferreddate, mean_w, color = nationality)) +
  geom_point(alpha = 0.7, size = 1.5) +
  geom_smooth(se = FALSE) +
  theme_bw() +
  labs(
    title = "Title Length in UK and US",
    subtitle = "NovelTM Data 1800-2009 \n ",
    x = NULL,
    y = NULL) +
  scale_color_manual("country", values = c("#A03B37", "#50684E")) + 
  theme(
    axis.title = element_text(family = "special", color = "#8B807C"),
    title = element_text(family = "special", color = "#52211E"),
    axis.text = element_text(color = "#52211E"),
    axis.ticks = element_blank(),
    plot.margin = unit(c(0.4, 3, 0.4, 0.4), "inches"), # t, r, b, l
    panel.border = element_rect(color = "#8B807C"),
    legend.position = c(0.8, 0.8)
  )

ggbackground(g, url)
```

## Распределения

Для визуализации распределений качественных переменных подходит стобиковая диаграмма, которая наглядно показывает число наблюдений в каждой группе. 

В датасете NovelTM представлены следующие категории литературы.

```{r}
noveltm |> 
  ggplot(aes(category, fill = category)) +
  geom_bar()
```

Нас будет интересовать категория longfiction, т.к. именно сюда попадает популярный в XIX в. жанр романа. Известно, что  примерно до 1840 г. почти половина романистов были женщинами, но к началу XX в. их доля снизилась [@underwood2019, 133]. Отчасти это объясняется тем, что после середины XIX в. профессия писателя становится более престижной, а его социальный статус повышается, что приводит к "джентрификации" романа. Посмотрим, что на этот счет могут сказать данные NovelTM. Переменная `gender` хранит данные о гендере автора. 

```{r}
noveltm |> 
  ggplot(aes(gender, fill = gender)) + 
  geom_bar()
```

Отберем лишь одну категорию и два гендера.

```{r}
noveltm_lf <- noveltm |> 
  select(inferreddate, gender, category) |> 
  filter(gender != "u", category == "longfiction") |> 
  select(-category)

noveltm_lf
```

Можно предположить, что соотношение мужчин и женщин в разные десятилетия менялось. Чтобы это выяснить, нам надо преобразовать данные, указав для каждого года соответствующую декаду, и посчитать число мужчин и женщин в каждой декаде. 

```{r}
noveltm_decade <- noveltm_lf |> 
  mutate(decade = (inferreddate %/% 10) * 10) 

noveltm_decade
```

Этого уже достаточно для визуализации, но она будет не очень наглядная. 

```{r}
noveltm_decade |> 
  ggplot(aes(decade, fill = gender)) +
  geom_bar(position = "dodge")
```
Узнаем, сколько всего наблюдений в каждом десятилетии. В 1790-х всего одно наблюдение, его удаляем.

```{r}
total <- noveltm_decade |> 
  group_by(decade) |> 
  summarise(total = n()) |> 
  filter(total > 1)

total
```

```{r}
summary <- noveltm_decade |> 
  group_by(decade, gender) |> 
  summarise(counts = n()) |> 
  filter(counts > 1)

summary
```
Теперь объединим две таблицы и посчитаем долю мужчин и женщин. 

```{r}
noveltm_share <- summary |> 
  left_join(total) |> 
  mutate(share = counts / total) |> 
  select(-counts, -total)

noveltm_share
```

Можно визуализировать. 

```{r}
noveltm_share |> 
  filter(gender == "f") |> 
  ggplot(aes(decade, share, color = gender)) +
  geom_line(show.legend = FALSE)
```


График, кажется, подтверждает, что доля женщин в литературе снижалась примерно до середины XX в. Однако при разделении данных на группы можно заметить другую тенденцию. 

```{r message=FALSE}
noveltm_nation <- noveltm |> 
  filter(category == "longfiction") |> 
  select(inferreddate, gender, nationality) |> 
  mutate(nationality = case_when(!nationality %in% c("uk", "us") ~ "other",
                                 .default = nationality)) |> 
  filter(gender != "u") |> 
  mutate(decade = (inferreddate %/% 10) * 10) 

noveltm_nation

total_nation <- noveltm_nation |> 
  group_by(decade) |> 
  summarise(total = n()) |> 
  filter(total > 1)

summary_nation <- noveltm_nation |> 
  group_by(decade, nationality, gender) |> 
  summarise(counts = n()) |> 
  filter(counts > 1)

summary_nation

noveltm_nation_share <- summary_nation |> 
  left_join(total) |> 
  mutate(share = counts / total) |> 
  select(-counts, -total)

noveltm_nation_share
```

```{r}
noveltm_nation_share |> 
  filter(gender == "f") |> 
  ggplot(aes(decade, share, color = nationality)) +
  geom_line()
```

Добавим название и немного поменяем оформление. 

```{r}
g <- noveltm_nation_share |> 
  filter(gender == "f") |> 
  ggplot(aes(decade, share, color = nationality)) +
  geom_line(size = 2, alpha = 0.7) + 
  theme_minimal() + 
  labs(
    title = "Female Writers' Share",
    subtitle = "NovelTM Data 1800-2009 \n ",
    x = NULL,
    y = NULL) +
  theme(text=element_text(size=14, family="serif")) 

g
```

::::{.callout-warning icon=false}
Запустите `swirl()`, выберите курс "Exploratory Data Analysis" и пройдите из него урок 10 `GGPlot2 Extras`.
::::

Правда или ложь? 

::::{.callout-tip icon=false}
Чтобы построить диаграмму рассеяния, нужно добавить к графическому объекту, созданному функцией `ggplot`, геометрический объект под названием `geom_scatterplot`.
::::

```{r echo=FALSE, results='asis'}
check_question("Ложь", options = c("Правда", "Ложь"), type = "select", right = "✅", wrong =  "❌")
```

::::{.callout-tip icon=false}
Функция `cut()` позволяет преобразовать числовой вектор в фактор.
::::

```{r echo=FALSE, results='asis'}
check_question("Правда", options = c("Правда", "Ложь"), type = "select", right = "✅", wrong =  "❌")
```

::::{.callout-tip icon=false}
Полуинтервал `(0.2,0.5]` включает 0.2 и не включает 0.5.
::::

```{r echo=FALSE, results='asis'}
check_question("Ложь", options = c("Правда", "Ложь"), type = "select", right = "✅", wrong =  "❌")
```


## Экспорт графиков из среды R

Способы:

-   реализованные в R драйверы стандартных графических устройств;
-   функция `ggsave()`
-   меню программы RStudio.

```{r eval=FALSE}
# код сохранит pdf в рабочую директорию 
pdf(file = "plot.pdf")
 
g 

dev.off()
```

Еще один способ сохранить последний график из пакета `ggplot2`. 

```{r eval=FALSE}
ggsave(
  filename = "plot.png",
  plot = last_plot(),
  device = "png",
  scale = 1,
  width = NA,
  height = 500,
  units = "px",
  dpi = 300
)
```

::::{.callout-warning icon=false}
Запустите `swirl()`, выберите курс "Exploratory Data Analysis" и пройдите из него урок 3 `Graphics Devices in R`.
::::

Не расслабляемся! Еще один вопросик.

::::{.callout-tip icon=false}
Что делает функция `dev.off()`?
::::

```{r echo=FALSE, results='asis'}

check_question("отключает графическое устройство", options = c("вызывает дьявола", "отгоняет дьявола", "отключает графическое устройство"), type = "radio", right = "Все так, и никакого колдунства.", wrong = "Нет, это только на языке ЛАТЫНЬ.")
```

::::{.callout-warning icon=false}
ПРАКТИЧЕСКОЕ ЗАДАНИЕ 2: СТАРОФРАНЦУЗСКАЯ ЛИТЕРАТУРА
::::

</br>

```{r eval=FALSE}
# загружаем нужные пакеты
library(languageR)
library(ggplot2)

# загружаем датасет
meta <- oldFrenchMeta

# допишите ваш код ниже
# постройте столбиковую диаграмму, 
# показывающую распределение произведений по темам; цветом закодируйте жанр; 
# уберите названия осей; 
# поверните координатную ось; 
# поменяйте тему оформления на черно-белую, 
# а шрифт -- на Palatino; 
# добавьте заголовок "Plot by [Your Name]"



#  экспортируйте график в формате jpg 
# с раширением 300 dpi; 
# в названии файла должна быть 
# ваша фамилия и номер группы

```

