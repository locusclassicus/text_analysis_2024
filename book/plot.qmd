# Визуализации

## Графические системы 

В R есть несколько графических систем: базовый R, `lattice` и `ggplot2`. В этом курсе мы будем работать лишь с `ggplot2` как с наиболее современной. Если вам интересны первые две, то вы можете обратиться к [версии](https://locusclassicus.github.io/text_analysis_2023/%D0%B2%D0%B8%D0%B7%D1%83%D0%B0%D0%BB%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8.html) курса 2023/2024 г. и к интерактивным урокам `swirl`. 

:::{.callout-warning icon=false}
Запустите `swirl()`; курс `R Programming` у вас уже установлен. Из него сделайте урок 15 `Base Graphics`.  Также установите курс `swirl::install_course("Exploratory Data Analysis")`. Из него можно пройти любые уроки: это необязательно, но поможет разобраться в теме. 
:::

Настоящая графическая сила R -- это пакет `ggplot2`. В его основе лежит идея "грамматики графических элементов" Лиланда Уилкинсона [@мастицкий2017] (отсюда "gg" в названии). С одной стороны, вы можете постепенно достраивать график, добавляя элемент за элементом (как в базовом R); с другой -- множество параметров подбираются автоматически, как в Lattice.

О различных видах графиков можно почитать по [ссылке](https://r-graph-gallery.com/l). В этом уроке мы научимся строить диаграмму рассеяния (scatter plot), столбиковую диаграмму (bar chart) и линейную диаграмму (line chart). Вот к чему мы стремимся. 

::: {layout-ncol=3}
![](./images/plot1.png)

![](./images/plot2.png)

![](./images/plot3.png)
:::


## Датасет: метаданные романов XIX-XX вв. 

Знакомиться с `ggplot2` мы будем на примере датасета из коллекции ["NovelTM Datasets for English-Language Fiction, 1700-2009"](https://www.pure.ed.ac.uk/ws/portalfiles/portal/342927125/UnderwoodEtal2020JCANovelTMDatasets.pdf), подготовленного Тедом Андервудом, Патриком Кимутисом и Джессикой Уайт.  Они собрали метаданные о 210,266 томах художественной прозы в HathiTrust Digital Library и составили из них несколько датасетов.

Мы возьмем небольшой [датасет](https://github.com/tedunderwood/noveltmmeta/tree/master/metadata), который содержит провернные вручную метаданные, а также сведения о категории художественной прозы для 2,730 произведений, созданных в период 1799-2009 г. (равные выборки для каждого года). Об особенностях сбора и подготовки данных можно прочитать по [ссылке](https://www.pure.ed.ac.uk/ws/portalfiles/portal/342927125/UnderwoodEtal2020JCANovelTMDatasets.pdf). Нужный нам файл (в формате tsv) [скопирован](https://github.com/locusclassicus/text_analysis_2024/raw/main/files/manual_title_subset.tsv) в репозиторий курса.

```{r eval = FALSE}
url <- "https://github.com/locusclassicus/text_analysis_2024/raw/main/files/manual_title_subset.tsv"
download.file(url, destfile = "../files/manual_title_subset.tsv")
```

Прежде всего избавимся от лишних столбцов и посмотрим на  данные.

```{r message=FALSE}
library(tidyverse)
noveltm <- read_tsv("../files/manual_title_subset.tsv")

noveltm <- noveltm |> 
  select(author, inferreddate, latestcomp, gender, nationality, shorttitle, category)

noveltm
```

Мы попробуем проверить наблюдение, сделанное Франко Моретти в статье "Корпорация стиля: размышления о 7 тысячах заглавий (британские романы 1740-1850)" (2009 г., рус. перевод в книге "Дальнее чтение", 2016 г.). Моретти заметил, что на протяжении XVIII-XIX вв. названия становятся короче, причем уменьшается не только среднее, но и стандартное отклонение (т.е. разброс значений). В публикации он предлагает несколько возможных объяснений для этого тренда. В датасете NovelTM есть не только романы (и не только британские), но тем более интересно будет сравнить результат. 

В наших данных сведения о публикации хранятся в столбце `inferreddate`, а названия -- в столбце `shorttitle`. Количество слов в названии придется посчитать: для этого можно посчитать количество пробелов и добавить единицу.  

```{r}
noveltm <- noveltm |> 
  mutate(n_words = str_count(shorttitle, " "))

noveltm
```

##  Диаграмма рассеяния

Функция `ggplot()` имеет два основных аргумента: `data` и `mapping`. Аргумент `mapping` задает эстетические атрибуты геометрических объектов. Обычно используется в виде `mapping = aes(x, y)`, где `aes()` означает  aesthetics. 

Под "эстетикой" подразумеваются графические атрибуты, такие как размер, форма или цвет. Вы не увидите их на графике, пока не добавите какие-нибудь "геомы" --  геометрические объекты (точки, линии, столбики и т.п.). Эти объекты могут слоями накладываться друг на друга [@wickham2016]. 

Диаграмма рассеяния, которая подходит для отражения связи между двумя переменными, делается при помощи  `geom_point()`.  Попробуем настройки по умолчанию.

```{r warning=FALSE}
noveltm |> 
  ggplot(aes(inferreddate, n_words)) + 
  geom_point()
```

Упс. Точек очень много, и они накладываются друг на друга, так как число слов -- дискретная величина. Поступим так же, как Моретти, который отразил на графике среднее для каждого года. Для этого нам надо снова поколдовать над данными.

```{r}
noveltm_summary <- noveltm |>
  group_by(inferreddate) |>
  summarise(n = n(),
            mean_w = mean(n_words, na.rm = TRUE)) |> 
  filter(n > 1)

noveltm_summary
```

Снова построим диаграмму рассеяния. Добавим линию тренда, изменим внешний вид точек и тему оформления, а также уберем подпись оси X.

```{r message=FALSE}
noveltm_summary |> 
  ggplot(aes(inferreddate, mean_w)) +
  geom_point(color = "steelblue", alpha = 0.7, size = 2) +
  geom_smooth(color = "tomato") + 
  theme_bw() +
  xlab(NULL)
```

Нисходящая тенденция, о которой писал Моретти, хорошо прослеживается. Но, возможно, она характерна не для всех стран?

## Сравнение двух групп

В столбце `nationality` хранятся данные о происхождении писателя. 

```{r}
noveltm |> 
  group_by(nationality) |> 
  summarise(n = n()) |> 
  arrange(-n)
```

Отберем только английских и американских авторов и сравним тенденции в этих двух группах. 

```{r message=FALSE}
noveltm_nation <- noveltm |> 
  filter(nationality %in% c("uk", "us")) |> 
  group_by(nationality, inferreddate) |> 
  summarise(n = n(),
            mean_w = mean(n_words, na.rm = TRUE)) |> 
  filter(n > 1) |> 
  select(-n) |> 
  arrange(-mean_w)

noveltm_nation
```

Категориальную переменную (национальность) в нашем случае проще всего закодировать цветом. Также добавим заголовок и подзаголовок.

```{r message=FALSE}
noveltm_nation |> 
  ggplot(aes(inferreddate, mean_w, color = nationality)) +
  geom_point(alpha = 0.7, size = 1.5) +
  geom_smooth() +
  theme_bw() +
  labs(
    title = "Title Length in UK and US",
    subtitle = "NovelTM Data 1800-2009",
    x = NULL
  )
  
```

Для разведывательного анализа данных вполне достаточно настроек по умолчанию, но для публикации вы, вероятно, захотите вручную поправить шрифтовое и цветовое оформление. 

## Цветовые шкалы

`Ggplot2` дает возможность легко поменять цветовую палитру и шрифтовое оформление, а также добавить фон.  

Функции `scale_color_brewer()` и `scale_fill_brewer()` позволяют использовать специально подобранные палитры хорошо сочетаемых цветов. Посмотреть эти палитры можно на сайте <https://colorbrewer2.org>. 

Общее правило для выбора таково. 

- Если дана качественная переменная с упорядоченными уровнями (например, "холодный", "теплый", "горячий") или количественная переменная, и необходимо подчеркнуть разницу между высокими и низкими значениями, то для визуализации подойдет последовательная шкала.

- Если дана количественная переменная с осмысленным  средним значением, например нулем, 50%, медианой, целевым показателем и т.п., то выбираем расходящуюся шкалу. 

- Если дана качественная переменная, уровни которой невозможно упорядочить (названия городов, имена авторов и т.п.), ищем качественную шкалу.  

![[Источник.](https://blog.datawrapper.de/diverging-vs-sequential-color-scales/)](https://blog.datawrapper.de/wp-content/uploads/2021/03/full-210101_colorscales24-1536x356.png)

Вот основные (но не единственные!) цветовые шкалы в R. Также цвета можно задавать и вручную -- по [названию](https://r-graph-gallery.com/42-colors-names.html) или коду.

![](https://r-graph-gallery.com/38-rcolorbrewers-palettes_files/figure-html/thecode-1.png)

```{r}
noveltm_nation |> 
  ggplot(aes(inferreddate, mean_w, color = nationality)) +
  geom_point(alpha = 0.7, size = 1.5) +
  geom_smooth(se = FALSE) +
  theme_bw() +
  labs(
    title = "Title Length in UK and US",
    subtitle = "NovelTM Data 1800-2009",
    x = NULL) +
  scale_color_brewer(palette = "Dark2")

  
```

## Шрифты 

Пакет `ggplot2` и расширения для него дают возможность использовать пользовательские шрифты.

```{r message=FALSE}
library(showtext)
font_add_google("Special Elite", family = "special")
showtext_auto()

noveltm_nation |> 
  ggplot(aes(inferreddate, mean_w, color = nationality)) +
  geom_point(alpha = 0.7, size = 1.5) +
  geom_smooth(se = FALSE) +
  theme_bw() +
  labs(
    title = "Title Length in UK and US",
    subtitle = "NovelTM Data 1800-2009",
    x = NULL) +
  scale_color_brewer(palette = "Dark2") + 
  theme(
    axis.title = element_text(family = "special"),
    title = element_text(family = "special")
  )
  
```

## Изображения 

Изображения можно добавлять и в качестве фона, и вместо отдельных геомов, например точек. Поправим цвета, чтобы они лучше сочетались с цветом изображения. 

```{r warning=FALSE, message=FALSE}
library(ggimage)
url <- "./images/book.jpg"

font_add_google("Special Elite", family = "special")
showtext_auto()


g <- noveltm_nation |> 
  ggplot(aes(inferreddate, mean_w, color = nationality)) +
  geom_point(alpha = 0.7, size = 1.5) +
  geom_smooth(se = FALSE) +
  theme_bw() +
  labs(
    title = "Title Length in UK and US",
    subtitle = "NovelTM Data 1800-2009 \n ",
    x = NULL,
    y = NULL) +
  scale_color_manual("country", values = c("#A03B37", "#50684E")) + 
  theme(
    axis.title = element_text(family = "special", color = "#8B807C"),
    title = element_text(family = "special", color = "#52211E"),
    axis.text = element_text(color = "#52211E"),
    axis.ticks = element_blank(),
    plot.margin = unit(c(0.4, 3, 0.4, 0.4), "inches"), # t, r, b, l
    panel.border = element_rect(color = "#8B807C"),
    legend.position = c(0.8, 0.8)
  )

ggbackground(g, url)
```

## Столбиковая диаграмма

Для визуализации распределений качественных переменных подходит стобиковая диаграмма, которая наглядно показывает число наблюдений в каждой группе. В датасете NovelTM представлены следующие категории литературы.

```{r}
noveltm |> 
  ggplot(aes(category, fill = category)) +
  geom_bar()
```

Нас будет интересовать категория longfiction, т.к. именно сюда попадает популярный в XIX в. жанр романа. Известно, что  примерно до 1840 г. почти половина романистов были женщинами, но к началу XX в. их доля снизилась [@underwood2019, 133]. Отчасти это объясняется тем, что после середины XIX в. профессия писателя становится более престижной, а его социальный статус повышается, что приводит к "джентрификации" романа. Посмотрим, что на этот счет могут сказать данные NovelTM. Переменная `gender` хранит данные о гендере автора. 

```{r}
noveltm |> 
  ggplot(aes(gender, fill = gender)) + 
  geom_bar()
```

Отберем лишь одну категорию и два гендера.

```{r}
noveltm_lf <- noveltm |> 
  select(inferreddate, gender, category) |> 
  filter(gender != "u", category == "longfiction") |> 
  select(-category)

noveltm_lf
```

Можно предположить, что соотношение мужчин и женщин в разные десятилетия менялось. Чтобы это выяснить, нам надо преобразовать данные, указав для каждого года соответствующую декаду, и посчитать число мужчин и женщин в каждой декаде. 

```{r}
noveltm_decade <- noveltm_lf |> 
  mutate(decade = (inferreddate %/% 10) * 10) 

noveltm_decade
```

Этого уже достаточно для визуализации, но она будет не очень наглядная. 

```{r}
noveltm_decade |> 
  ggplot(aes(decade, fill = gender)) +
  geom_bar(position = "dodge")
```
Узнаем, сколько всего наблюдений в каждом десятилетии.

```{r message=FALSE}
total <- noveltm_decade |> 
  group_by(decade) |> 
  summarise(total = n()) 

total
```

```{r message=FALSE}
summary <- noveltm_decade |> 
  group_by(decade, gender) |> 
  summarise(counts = n()) |> 
  filter(counts > 1)

summary
```
Теперь объединим две таблицы и посчитаем долю мужчин и женщин. 

```{r}
noveltm_share <- summary |> 
  left_join(total) |> 
  mutate(share = counts / total) |> 
  select(-counts, -total)

noveltm_share
```

```{r}
noveltm_share |> 
  ggplot(aes(decade, share, fill = gender)) +
  geom_bar(stat = "identity")
```
Попробуем развернуть диаграмму - так ее будет легче читать.

```{r}
noveltm_share |> 
  ggplot(aes(decade, share, fill = gender)) +
  geom_bar(stat = "identity") + 
  coord_flip() + 
  xlab(NULL) + 
  ylab(NULL)
```
Поскольку нас интересует доля женщин, логично поменять группы местами. Также поменяем порядок, в котором идут года (от меньшего к большему).

```{r}
noveltm_share |> 
  ggplot(aes(as.factor(decade), share, fill = gender)) +
  geom_bar(stat = "identity", position = position_fill(reverse = TRUE)) + 
  scale_x_discrete(limits = rev) +
  coord_flip() + 
  ylab(NULL) + 
  xlab(NULL) + 
  theme_minimal()
```

Убавим цвет в мужской части диаграммы и добавим заголовки. 

```{r}
noveltm_share |> 
  ggplot(aes(as.factor(decade), share, fill = gender)) +
  geom_bar(stat = "identity", 
           position = position_fill(reverse = TRUE),
           color = "grey",
           show.legend = FALSE) + 
  scale_x_discrete(limits = rev) +
  scale_fill_manual(values = c("lightcoral", "white")) +
  coord_flip() + 
  ylab(NULL) + 
  xlab(NULL) + 
  theme_minimal() +
  labs(
    x = NULL,
    y = NULL,
    title = "Women Share per Decade",
    subtitle = "NovelTM Data 1800-2009"
  ) + 
  theme(text=element_text(size=12, family="serif")) 
```
Стоит подвинуть заголовок, убрать просветы между столбцами и добавить подписи. 

```{r}
label_data <- noveltm_share |> 
  filter(gender == "f") |> 
  mutate(share = round(share, 2))

noveltm_share |> 
  ggplot(aes(as.factor(decade), share, fill = gender)) +
  geom_bar(stat = "identity", 
           position = position_fill(reverse = TRUE),
           color = "darkred",
           show.legend = FALSE,
           width = 1) + 
  scale_x_discrete(limits = rev) +
  scale_fill_manual(values = c("#f5b2b2", "white")) +
  coord_flip() + 
  ylab(NULL) + 
  xlab(NULL) + 
  theme_minimal() +
  labs(
    x = NULL,
    y = NULL,
    title = "Women Share per Decade",
    subtitle = "NovelTM Data 1800-2009"
  ) + 
  geom_text(data = label_data, aes(label = share), 
            hjust = 1.2, 
            color = "darkred",
            family = "serif") +
  theme(text=element_text(size=12, family="serif", color = "darkred"),
        plot.title.position = "plot",
        axis.text = element_text(color = "darkred"),
        )
```


## Линейная диаграмма

Данные о доли женщин-писателей можно представить и в виде линии: в нашем случае это не лишено смысла, поскольку ось `x` -- это временная шкала. 

```{r}
noveltm_share |> 
  filter(gender == "f") |> 
  ggplot(aes(decade, share, color = gender)) +
  geom_line(show.legend = FALSE)
```

По умолчанию ось `y` усекается, и создается впечатление, что доля женщин ок. 1900 падает чуть ли не до нуля. Поправим вручную границы оси. 

```{r}
noveltm_share |> 
  filter(gender == "f") |> 
  ggplot(aes(decade, share, color = gender)) +
  geom_line(show.legend = FALSE) +
  expand_limits(y = 0)
```

График, кажется, подтверждает, что доля женщин в литературе снижалась примерно до середины XX в. Однако при разделении данных на группы можно заметить другую тенденцию. 

```{r message=FALSE}
noveltm_nation <- noveltm |> 
  filter(category == "longfiction") |> 
  select(inferreddate, gender, nationality) |> 
  mutate(nationality = case_when(!nationality %in% c("uk", "us") ~ "other",
                                 .default = nationality)) |> 
  filter(gender != "u") |> 
  mutate(decade = (inferreddate %/% 10) * 10)

noveltm_nation

total_nation <- noveltm_nation |> 
  group_by(decade) |> 
  summarise(total = n()) |> 
  filter(total > 1)

summary_nation <- noveltm_nation |> 
  group_by(decade, nationality, gender) |> 
  summarise(counts = n()) |> 
  filter(counts > 1)

summary_nation

noveltm_nation_share <- summary_nation |> 
  left_join(total) |> 
  mutate(share = counts / total) |> 
  select(-counts, -total)

noveltm_nation_share
```

```{r}
noveltm_nation_share |> 
  filter(gender == "f") |> 
  ggplot(aes(decade, share, color = nationality)) +
  geom_line() 
```

Добавим название и немного поменяем оформление. 

```{r}
noveltm_nation_share |> 
  filter(gender == "f") |> 
  ggplot(aes(decade, share, color = nationality)) +
  geom_line(linewidth = 2, alpha = 0.7) + 
  theme_minimal() + 
  labs(
    title = "Female Writers' Share",
    subtitle = "NovelTM Data 1800-2009 \n ",
    x = NULL,
    y = NULL) +
  theme(text=element_text(size=14, family="serif")) + 
  scale_color_viridis_d()
```

Можно добавить темную рамку и переместить легенду.

```{r}
g <- noveltm_nation_share |> 
  filter(gender == "f") |> 
  ggplot(aes(decade, share, color = nationality)) +
  geom_line(linewidth = 2, alpha = 0.7) + 
  theme_light() + 
  labs(
    title = "Female Writers' Share",
    subtitle = "NovelTM Data 1800-2009",
    x = NULL,
    y = NULL) +
  theme(text=element_text(size=14, family="serif"),
        axis.text = element_text(color = "white"),
        legend.position = c(0.5, 0.83), 
        legend.direction = "horizontal",
        legend.title = element_blank(),
        legend.text = element_text(color = "#440151FF"),
        legend.background = element_blank(),
        plot.title = element_text(hjust=0.5, color = "white"),
        plot.subtitle = element_text(hjust=0.5, color = "white"),
        plot.background = element_rect(fill = "#440151FF"),
        panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        panel.grid.major.y = element_line(linewidth = 0.5)) + 
  scale_color_viridis_d()

g
```

## Экспорт графиков из среды R

Способы:

-   реализованные в R драйверы стандартных графических устройств;
-   функция `ggsave()`
-   меню программы RStudio.

```{r eval=FALSE}
# код сохранит pdf в рабочую директорию 
pdf(file = "plot.pdf")
 
g 

dev.off()
```

Еще один способ сохранить последний график из пакета `ggplot2`. 

```{r eval=FALSE}
ggsave(
  filename = "plot.png",
  plot = last_plot(),
  device = "png",
  scale = 1,
  width = NA,
  height = 500,
  units = "px",
  dpi = 300
)
```


:::{.callout-warning icon=false}
Практическое задание "Старофрацузская литература"
:::


```{r eval=FALSE}
# загружаем нужные пакеты
library(languageR)
library(ggplot2)

# загружаем датасет
meta <- oldFrenchMeta

# допишите ваш код ниже
# постройте столбиковую диаграмму, 
# показывающую распределение произведений по темам; цветом закодируйте жанр; 
# уберите названия осей; 
# поверните координатную ось; 
# поменяйте тему оформления на черно-белую, 
# а шрифт -- на Palatino; 
# добавьте заголовок "Plot by [Your Name]"



#  экспортируйте график в формате jpg 
# с раширением 300 dpi; 
# в названии файла должна быть 
# ваша фамилия и номер группы

```

