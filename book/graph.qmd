# Сетевые данные и графы

> Сети -- это все, что окружает нас. 
> 
> @luke2017

Любые сети состоят из отдельных участников (людей или вещей в сети) и отношений между ними. Сети часто визуализируются с помощью _графов_ –- структур, состоящих из множества участников (вершин) и линий (ребер или дуг), отображающих связи между ними. В гуманитарных науках в виде сети можно представить, например, отношения [соавторства](https://dhcloud.org/spishemsya-studenty-fgn-issledovali-seti-soavtorstva-na-fakultete/) между исследователями, совместное появление [персонажей](https://sysblok.ru/philology/socseti-russkoj-dramy-chast-i-osnovy-setevogo-analiza/) в драматическом произведении или связи между философскими [концептами](https://muse.jhu.edu/article/761035). 

В R доступно множество пакетов для работы с сетями (`network`, `sna`, `UserNetR` и др.), но в ближайших уроках мы сосредоточимся на одном из них под названием `igraph`.


## Базовое описание

Мы начнем работу с сетями на небольшом датасете, опубликованном Якобом Морено в 1930-х гг. Этот датасет содержит сеть дружеских отношений между учениками 4-го класса. Скачать можно [отсюда](https://github.com/locusclassicus/text_analysis_2024/raw/main/data/moreno.Rdata).

```{r message=F}
library(igraph)
load("../data/moreno.Rdata")
moreno
```

```{r}
plot(Moreno)
```

Самая главная характеристика сети -- это ее **размер**. Размер -- это количество **участников** (members), которые называются **узлами** (nodes), **вершинами** (vertices) или акторами.


```{r}
network.size(Moreno)
```

Еще одна важная характеристика сети -- это ее **плотность**. 

```{r}
gden(Moreno)
```

Плотность -- это доля имеющихся связей по отношению к максимально возможному количеству связей. Формула плотности будет отличаться для **направленных** ($\frac{L}{k(k - 1)}$) и **ненаправленных** ($\frac{2L}{k(k-1)}$) сетей (где $k(k-1)$ -- это максимально возможное число связей). 

**Компонента** сети -- это подгруппа, где все акторы связаны между собой прямо или косвенно. На графе выше видно две компоненты.

**Диаметр** сети -- количество шагов, которые нужно пройти, чтобы попасть из узла А в узел B; для сетей с несколькими компонентами учитывается та, что больше. **Геодезическое расстояние** -- это кратчайший путь между двумя узлами; диаметром считается максимальное расстояние для двух узлов.

```{r}
lgc <- component.largest(Moreno, result = "graph")
gd <- geodist(lgc)
max(gd$gdist)
```

Коэффициент **кластеризации**, или **транзитивность**,  отражает тенденцию к созданию закрытых треугольников, т.е. к замыканию. Транзитивность определяется как доля закрытых треугольников по отношению к общему количеству открытых и закрытых треугольников. 

```{r}
gtrans(Moreno, mode="graph")
```

## Создание сетевых данных

### Социоматрица 

Матрица, хранящая информацию о сети, называется **социоматрицей** (или матрицей смежности). Ее можно создать вручную. 

```{r}
netmat1 <- rbind(c(0,1,1,0,0),
                 c(0,0,1,1,0),
                 c(0,1,0,0,0),
                 c(0,0,0,0,0),
                 c(0,0,1,0,0))
rownames(netmat1) <- letters[1:5]
colnames(netmat1) <- letters[1:5]
net1 <- network(netmat1, matrix.type ="adjacency")
class(net1)
summary(net1)
```
Функция gplot из пакета sna позволяет визуализировать эту матрицу в виде графа.

```{r}
gplot(net1, vertex.col = 3, displaylabels = TRUE)
```

### Список ребер 

Ту же матрицу можно построить при помощи **списка ребер**. Списки ребер меньше по размеру, и собирать сетевые данные в таком формате проще. 

```{r}
netmat2 <- rbind(c(1,2),
                 c(1,3),
                 c(2,3),
                 c(2,4),
                 c(3,2),
                 c(5,3))
net2 <- network(netmat2, matrix.type = "edgelist")
network.vertex.names(net2) <- letters[1:5]
summary(net2)
```

Граф будет выглядеть точно так же.

```{r}
gplot(net2, vertex.col = 4, displaylabels = TRUE)
```

### Формула

Пакет `igraph` дает возможность создать сеть разными способами, в том числе с использованием формулы. Перед использованием пакета лучше отвязать `statnet`. Для ненаправленных графов используется `--`, для направленных `-+`.

```{r}
detach(package:sna)
detach(package:network)
```

```{r message=FALSE}
library(igraph)
g <- graph.formula(a--c, a--b, b--d, b--c, e--c)
g
```

Объекты `igraph` можно передать напрямую `plot`^[https://kateto.net/netscix2016.html], но ниже мы рассмотрим и другие возможности.

```{r}
plot(g)
```


### Импорт данных 

Также данные можно импортировать. Мы воспользуемся датасетом, опубликованном на сайте Пушкинского дома, ["Словарь русских писателей XVIII века: сеть персоналий"](https://dataverse.pushdom.ru/dataset.xhtml?persistentId=doi:10.31860/openlit-2022.1-B002).

Датасет представляет собой осмысленные в терминах сетевого анализа междустатейные ссылки в Словаре русских писателей XVIII века (1988–2010. Вып. 1–3). Узлами сети выступают посвященные персоналиям статьи словаря, а ребрами — ссылки на другие статьи в том же словаре.


```{r message=FALSE}
library(readr)
dict_data <- read_csv(file = "files/Persons_EDGES.csv")

dict_data
```

Эту таблицу можно преобразовать в сеть несколькими способами. Функция `graph_from_edgelist()` ожидает на входе матрицу с двумя столбцами. 

```{r}
dict_graph <- graph_from_edgelist(as.matrix(dict_data[,1:2]))

summary(dict_graph, print.adj = F)
```
Описание позволяет понять, что граф является направленным (D), а его узлы имеют имена (N). Всего в графе 780 вершин и 4440 связей. Демонстрационная версия интерактивного приложения, построенного на сетевых данных, размещена [здесь](https://nevmenandr.github.io/rus-dict18-persons/). Приложение позволяет работать с отдельными узлами сети, изучать их соседей и количественные характеристики. Мы же выведем лишь небольшую часть узлов. 

## Атрибуты вершин (узлов)

В том же объекте-сети можно хранить дополнительные данные об узлах. В датасете "Словарь..." в качестве такого атрибута хранятся данные об имени автора:

```{r}
names <- names(V(dict_graph))
names[1:12]
```

Атрибуты вершин можно использовать для того, чтобы задать новую подсеть для анализа. Например, выбрать только некоторых авторов из "Словаря...".

```{r}
vert <- which(names(V(dict_graph)) %in% c("Д.И.Фонвизин", "А.Д.Кантемир", "В.К.Тредиаковский", "Е.Р.Дашкова", "Н.М.Карамзин"))

dict_sub <- induced_subgraph(dict_graph, 
                             vids = vert)

dict_sub
```
## Фильтрация по узлу

Для визуализации таких объектов подходит функция `ggraph()` из одноименного пакета, которая основана на грамматике `ggplot`.

```{r message=FALSE, warning=FALSE}
library(ggraph)
names <- names(V(dict_sub))

ggraph(dict_sub, layout = "fr") +
  geom_edge_link(color = "cadetblue3") +
  geom_node_point(size = 5, color = "bisque4", shape = 18) +
  geom_node_text(aes(label = names), nudge_y = -0.1) +
  theme_graph()
```

Немного баловства (но лучше, конечно, другие картинки использовать).

```{r}
library(ggimage)

## получаем координаты
subgraph.layout <- layout.fruchterman.reingold(dict_sub)
x <-  subgraph.layout[,1]
y <- subgraph.layout[,2]

ggraph(dict_sub, layout = subgraph.layout) +
  geom_edge_link(color = "cadetblue3") +
  geom_pokemon(aes(x, y), image="pikachu", size = 0.2) +
  geom_node_text(aes(label = names), nudge_y = -0.1) +
  theme_graph()
```


Теперь выберем отдельный узел _вместе_ с его соседями. 


```{r}
vert <- which(names(V(dict_graph))=="А.Д.Кантемир")

dict_sub <- induced_subgraph(dict_graph, 
                             vids = c(vert, neighbors(dict_graph, "А.Д.Кантемир")))
```


```{r}
dict_sub
```
Используем другую укладку, также повернем и сдвинем подписи.

```{r}
names <- names(V(dict_sub))

ggraph(dict_sub, layout = "linear") +
  geom_edge_arc(color = "cadetblue3") +
  geom_node_point(size = 5, color = "bisque4", shape = 18) +
  geom_node_text(aes(label = names), angle = 60, nudge_x = 0.1, nudge_y = -0.1) +
  theme_graph()
```

## Атрибуты ребер

В данных из "Словаря..." у ребер нет атрибутов, в чем легко убедиться.  

```{r}
get.edge.attribute(dict_sub)
```

В некоторых случаях бывает полезно эти атрибуты назначить: например, если вы провели дополнительное исследование и хотите добавить данные. 

```{r}
set.seed(1234)
dict_sub <- set_edge_attr(dict_sub, "value", index = E(dict_sub), value = sample(1:3, length(E(dict_sub)), replace = T))
```

Назначенный атрибут (сейчас это случайное число) можно закодировать на графе:

```{r}
ggraph(dict_sub, layout = "linear") +
  geom_edge_arc(aes(width = value), color = "cadetblue3", alpha = 0.5) +
  geom_node_point(size = 5, color = "bisque4", shape = 18) +
  geom_node_text(aes(label = names), angle = 60, nudge_x = 0.1, nudge_y = -0.1) +
  theme_graph()
```


## Импорт из gexf 

Датасет ["«Камер-фурьерский журнал» В. Ходасевича"](https://dataverse.pushdom.ru/dataset.xhtml?persistentId=doi:10.31860/openlit-2020.05-B001) хранит информацию о встречах, которые В. Ходасевич фиксировал в своем камер-фурьерском журнале, начиная с 1922 года. Данные за каждый месяц хранятся отдельно в файлах формата `gexf` (Graph Exchange XML Format)), для их чтения нужен особый пакет.

```{r}
library(rgexf)
kfj <- read.gexf("files/1922_Июль_.gexf")
head(kfj)
```


Трансформируем в формат `igraph`.

```{r}
kfj_graph <- gexf.to.igraph(kfj)
kfj_graph
```

В данном случае U означает ненаправленный граф, а N говорит о том, что вершины имеют имена. Буква W указывает на то, что ребрам присвоены веса. Далее приводится информация о количестве вершин (42) и ребер (86). 

Заглянем в атрибуты. 

```{r message=FALSE}
# имена узлов 
V(kfj_graph) 
```

Сохраним имена узлов как вектор.

```{r}
names <- get.vertex.attribute(kfj_graph)$name
```

Зачем-то в объекте хранится еще и цвет узлов (один для всех). 

```{r}
color <- V(kfj_graph)$color
color
```

Атбрибуты ребер.

```{r}
weight <- get.edge.attribute(kfj_graph)$weight
weight
```

## Визуализация с ggraph

Ширину ребра отрегулируем в зависимости от веса, который отражает частоту контактов. Мы уже видели, что эти данные хранятся в атрибутах ребер. Функция `as.factor` препятствует дроблению чисел, т.к. в нашем случае это не имеет смысла.

```{r message=FALSE, warning=FALSE}
ggraph(kfj_graph) +
  geom_edge_link(alpha = 0.25, 
                   aes(width = as.factor(weight)), 
                   show.legend = F) +
  geom_node_point(color = color, show.legend = F, size = 2) +
  geom_node_text(aes(label = names),  repel = TRUE) +
  theme_graph()
```

## Фильтрация по атрибутам ребер

Атрибуты ребер, как и атрибуты имен, можно использовать для создания подсети. Например, мы можем отобрать только имена тех людей, с которыми Ходасевич встречался больше одного раза в месяц (это август 1922 г.).

```{r}
E(kfj_graph)[weight > 1]
```

Визуализируем подсеть. Цветовая раскраска в данном случае ничего не добавляет, просто показываю красивое. Подписи можно добавить не только к узлам, но и к ребрам.

```{r warning=FALSE}
kfj_sub <- subgraph.edges(kfj_graph, E(kfj_graph)[weight > 1])
names_sub <- get.vertex.attribute(kfj_sub)$name
weight_sub <- get.edge.attribute(kfj_sub)$weight

ggraph(kfj_sub, layout = "kk") +
  geom_edge_link(alpha = 0.25, 
                 linetype = 2, 
                 aes(label = weight_sub), 
                 label_colour = "sienna", 
                 label_dodge = unit(2.5, 'mm'),
                 angle_calc = 'along') +
  geom_node_point(size = 3, aes(color = names_sub), show.legend = F) +
  geom_node_text(aes(label = names_sub),  repel = TRUE) +
  theme_graph()
```

## Укладка сети

Графическое представление одной и той же сети будет зависеть от выбранного способа **укладки**. 

При построении графиков сетей стремятся следовать следующим принципам:

- минимизировать пересечения ребер;
- максимизировать симметричность укладки узлов;
- минимизировать изменчивость длины ребер;
- максимизировать угол между ребрами, когда они пересекают или соединяют узлы;
- минимизировать общее пространство для вывода сети. 

![](images/layout.png)

Для автоматического построения укладок разработано большое количество методов. В пакете `igraph` для каждого есть особая функция:

- layout_randomly 	
- layout_in_circle 	
- layout_on_sphere
- layout_with_drl 	(Distributed Recursive Layout) 
- layout_with_fr 	(Fruchterman-Reingold) 
- layout_with_kk 	(Kamada-Kawai)
- layout_with_lgl (Large Graph Layout)
- layout_as_tree 	(Reingold-Tilford)
- layout_nicely 	

Можно выбрать укладку, не вызывая отдельную функцию:

```{r}
ggraph(kfj_graph, layout = "kk") +
  geom_edge_link(alpha = 0.25) +
  geom_node_point(color = color, show.legend = F, size = 2) +
  geom_node_text(aes(label = names),  repel = TRUE) +
  theme_graph()
```

Поменяем укладку и цвета: 

```{r}
ggraph(kfj_graph, layout = "fr") +
  geom_edge_link(aes(color = "sienna"), 
                show.legend = F) +
  geom_node_point(size = 2, color = "olivedrab") +
  geom_node_text(aes(label = names),  repel = TRUE, color = "grey30") +
  theme_graph()
```

Не все укладки одинаково хороши.

```{r}
ggraph(kfj_graph, layout = "linear", circular = T) +
  geom_edge_arc(aes(color = "sienna"), 
                show.legend = F) +
  geom_node_point(size = 2, color = "olivedrab") +
  geom_node_text(aes(label = names),  repel = TRUE, color = "grey30") +
  theme_graph()
```

Подробнее см.: https://www.data-imaginist.com/2017/ggraph-introduction-edges/

![](https://d33wubrfki0l68.cloudfront.net/3773270e1c9c69a0762e26ff76b8cdd40c09f127/1fef0/assets/images/edge_meme_wide.jpg)