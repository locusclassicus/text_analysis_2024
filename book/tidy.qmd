# Опрятные данные

> Tidy datasets are all alike, but every messy dataset is messy in its own way.
>
> --- Hadley Wickham

## Синтаксис tidyverse

Существуют два основных "диалекта" R, один из которых опирается главным образом на функции и структуры данных базового R, а другой пользуется синтаксисом tidyverse [@winter2020]. Tidyverse -- это семейство пакетов (**метапакет**), разработанных Хадли Уикхемом и др., которое включает в себя в том числе пакеты `dplyr`, `ggplot2` и многие другие.

```{r}
# загрузить все семейство
library(tidyverse)
```

### Tibble

Основная структура данных в tidyverse -- это tibble, современный вариант датафрейма[^03-tidy-1]. Тиббл, как говорят его разработчики, это ленивые и недовольные датафреймы: они делают меньше и жалуются больше[^03-tidy-2]. Это позволяет решать проблемы на более ранних этапах, что, как правило, приводит к созданию более чистого и выразительного кода.

[^03-tidy-1]: <https://r4ds.had.co.nz/tibbles.html>

[^03-tidy-2]: <https://tibble.tidyverse.org/>

Основные отличия от обычного датафрейма:

-   текст по умолчанию конвертируется в строки, а не в факторы;^[Подробнее о том, почему так вообще происходит: https://simplystatistics.org/posts/2015-07-24-stringsasfactors-an-unauthorized-biography/]
-   усовершенствованный метод `print()`, не нужно постоянно вызывать `head()`;
-   нет имен рядов;
-   допускает синтаксически "неправильные" имена столбцов;
-   при индексировании не меняет тип данных на вектор и др.

```{r}
load("../data/diorisis_meta.Rdata")

# распечатывает только первые 10 рядов, для каждого столбца указан тип данных, строки пронумерованы
as_tibble(diorisis_meta)

# индексирование 
head(as.data.frame(diorisis_meta)[, 1])  # возвращает вектор
as_tibble(diorisis_meta)[,1] # возвращает тиббл

# имена столбцов
df <- data.frame('var 1' = 1:2, two = 3:4)
df
tbl <- tibble('var 1' = 1:2, two = 3:4)
tbl
```

Пора тренироваться.

::::{.callout-warning icon=false}
Установите курс `swirl::install_course("Getting and Cleaning Data")`.  Загрузите библиотеку `library(swirl)`, запустите `swirl()`, выберите этот курс и пройдите из него урок 1 `Manipulating Data with dplyr`.
::::

</br>

::::{.callout-note icon=false}
При попытке загрузить урок вы можете получить сообщение об ошибке: `/Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/swirl/Courses/Getting_and_Cleaning_Data/Manipulating_Data_with_dplyr/lesson.yaml) Scanner error: while scanning a tag at line 205, column 9 did not find expected whitespace or line break at line 205, column 19`. Скопируйте из этого сообщения путь до папки с курсом. На MacOS откройте Finder `>` Go `>` Go to Folder. Вставьте путь до папки в открывшееся окно, найдите там файл `lesson.yaml`.  Скачайте исправленный файл [по ссылке](https://github.com/locusclassicus/text_analysis_2023/blob/main/files/lesson.yaml) и замените его в папке. Не меняйте название! Обсуждение проблемы [здесь](https://github.com/swirldev/swirl_courses/issues/394). 
::::


**Все попробовали, не получилось?**

::::{.callout-tip icon=false collapse=true}
## Нажмите, чтобы увидеть подсказку.
Ну и ладно, двигайтесь дальше.
::::


**Все получилось?**

::::{.callout-tip icon=false collapse=true}
## Нажмите, чтобы увидеть подсказку.
Класс! Двигайтесь дальше.
::::


Время вопросов! Обычный датафрейм или тиббл?

::::{.callout-tip icon=false}
По умолчанию распечатывает только первые 10 рядов в консоль.
::::

```{r echo=FALSE, results='asis'}
library(checkdown)
check_question("тиббл", options = c("датафрейм", "тиббл"), type = "radio", right = "✅", wrong =  "❌")
```
 
::::{.callout-tip icon=false}
Молчаливо исправляет некорректные названия столбцов.
::::
```{r echo=FALSE, results='asis'}
check_question("датафрейм", options = c("датафрейм", "тиббл"), type = "radio", right = "✅", wrong =  "❌")
```

::::{.callout-tip icon=false}
По умолчанию конвертирует строки в факторы при импорте данных. 
::::

```{r echo=FALSE, results='asis'}
check_question("датафрейм", options = c("датафрейм", "тиббл"), type = "radio", right = "✅", wrong =  "❌")
```

::::{.callout-tip icon=false}
Не имеет названий рядов.
::::

```{r echo=FALSE, results='asis'}
check_question("тиббл", options = c("датафрейм", "тиббл"), type = "radio", right = "✅", wrong =  "❌")
```

Кстати, обратили внимание, как работает оператор `<=` с символьным вектором? 

### Dplyr

В уроке `swirl` выше вы уже немного познакомились с "грамматикой манипуляции данных", лежащей в основе `dplyr`[^03-tidy-3]. Здесь об этом будет сказано подробнее. Эта грамматика предоставляет последовательный набор глаголов, которые помогают решать наиболее распространенные задачи манипулирования данными:

[^03-tidy-3]: <https://dplyr.tidyverse.org/>

-   `mutate()` добавляет новые переменные, которые являются функциями существующих переменных;
-   `select()` выбирает переменные на основе их имен;
-   `filter()` выбирает наблюдения на основе их значений;
-   `summarise()` обобщает значения;
-   `arrange()` изменяет порядок следования строк.

Все эти глаголы естественным образом сочетаются с функцией `group_by()`, которая позволяет выполнять любые операции "по группам", и с оператором **pipe** `%>%` из пакета `magrittr`.

В итоге получается более лаконичный и читаемый код, что можно показать на примере.

```{r}
diorisis_meta %>% 
  select(-subgenre) %>% 
  filter(genre == "Narrative") %>%  
  group_by(name) %>% 
  count() %>% 
  arrange(-n)
```

В базовом R мы бы делали то же самое вот так:

```{r}
diorisis_df <- as.data.frame(diorisis_meta)
diorisis_select <- diorisis_df[,-5] # remove column
diorisis_filter <- diorisis_select[diorisis_select$genre == "Narrative", ]
diorisis_names <- diorisis_filter$name
diorisis_count <- as.data.frame(table(diorisis_names))
diorisis_sort <- diorisis_count[order(diorisis_count$Freq, decreasing =T),]
head(diorisis_sort)
```

Тут должен быть какой-то поучительный вывод. Но вместо него будет задание на кодинг. Вам придется редактировать код, который предложит программа, так что сгруппируйтесь.

::::{.callout-warning icon=false}
Запустите `swirl()`, выберите курс `Getting and Cleaning Data` и пройдите из него урок 2 `Grouping and Chaining with dplyr`.
::::

Правда или ложь?

::::{.callout-tip icon=false}
Функция `n_distinct()` возвращает все уникальные значения. 
::::

```{r echo=FALSE, results='asis'}
check_question("Ложь", type = "radio", options = c("Правда", "Ложь"), right = "✅", wrong =  "❌")
```

::::{.callout-tip icon=false}
Если `x <- 1:100`, то функция `quantile(x, probs = 0.9)` вернет значения от 91 до 100. 
::::

```{r echo=FALSE, results='asis'}
check_question("Ложь", type = "radio", options = c("Правда", "Ложь"), right = "✅", wrong =  "❌")
```


::::{.callout-note icon=false}
Кванти́ль в математической статистике — значение, которое заданная случайная величина не превышает с фиксированной вероятностью. В нашем случае 90% данных ниже 90.1.
:::

Это было сложное задание, можно сделать перерыв ☕


## Опрятные данные

Но tidyverse -- это не только особый синтаксис, но и отдельная идеология "опрятных данных". "Сырые" данные, с которыми мы работаем, редко бывают опрятны, и перед анализом их следует "почистить" и преобразовать[^03-tidy-4].

[^03-tidy-4]: <https://r4ds.had.co.nz/tidy-data.html>

Основные принципы опрятных данных:

-   отдельный столбец для каждой переменной;
-   отдельный ряд для каждого наблюдения;
-   у каждого значения отдельная ячейка;
-   один датасет -- одна таблица.

![_Принципы опрятных данных_. [Источник](https://r4ds.had.co.nz/tidy-data.html).](https://d33wubrfki0l68.cloudfront.net/6f1ddb544fc5c69a2478e444ab8112fb0eea23f8/91adc/images/tidy-1.png)

</br>

Посмотрите на учебные тибблы из пакета `tidyr` и подумайте, какое из этих правил нарушено в каждом случае. 

```{r}
data("table2")
table2
data("table3")
table3

data("table4a")
table4a
data("table4b")
table4b
```

Важные функции для преобразования данных из пакета `tidyr`:^[https://tidyr.tidyverse.org/reference/index.html]

- `separate()` делит один столбец на новые;
- `unite()` объединяет столбцы;
- `pivot_longer()` удлиняет таблицу;
- `pivot_wider()` расширяет таблицу;
- `drop_na()` и `replace_na()` указывают, что делать с NA и др.

Также упомянем функцию `distinct()` из `dplyr`, которая оставляет только уникальные наблюдения и предсталяет собой аналог базовой `unique()` для таблиц.

Кроме того, в `dplyr` есть полезное семейство функций `_join`, позволяющих объединять данные в различных таблицах.[^03-tidy-5] Дальше мы потренируемся с ними работать, но сначала пройдем урок `swirl`. Это достаточно сложный урок (снова понадобится редактировать скрипт), но он нам дальше здорово поможет. 


[^03-tidy-5]: <https://r4ds.had.co.nz/relational-data.html>

::::{.callout-warning icon=false}
Запустите `swirl()`, выберите курс `Getting and Cleaning Data` и пройдите из него урок 3 `Tidying Data with tidyr`.
::::

Правда или ложь?

::::{.callout-tip icon=false}
Функция `separate()` обязательно требует указать разделитель.
::::

```{r echo=FALSE, results='asis'}
check_question("Ложь", options = c("Правда", "Ложь"), type = "select", right = "✅", wrong =  "❌")
```

::::{.callout-tip icon=false}
Принципы опрятных данных требуют, чтобы одному наблюдению соответствовал один столбец.
::::

```{r echo=FALSE, results='asis'}
check_question("Ложь", options = c("Правда", "Ложь"), type = "select", right = "✅", wrong =  "❌")
```

::::{.callout-tip icon=false}
Функция `contains()` используется вместе с `filter()` для выбора рядов.
::::

```{r echo=FALSE, results='asis'}
check_question("Ложь", options = c("Правда", "Ложь"), type= "select", right = "✅", wrong =  "❌")
```

Отличная работа! Прежде чем двигаться дальше, приведите в порядок table2, 3, 4a-4b (последние две также объедините) в единый датасет.


::::{.callout-warning icon=false}
ПРАКТИЧЕСКОЕ ЗАДАНИЕ 3: БИБЛИОТЕКА GUTENBERG
::::

</br>

```{r eval=FALSE}
devtools::install_github("ropensci/gutenbergr")
library(gutenbergr)
library(dplyr)
library(tidyr)

works <- gutenberg_works()

# Отберите ряды, в которых gutenberg_author_id равен 65;
# после этого выберите два столбца: author, title
my_data <- works %>% 
  # ваш код здесь
  
# Загрузите данные об авторах и выберите столбцы: author, deathdate
authors <- gutenberg_authors %>% 
  # ваш код здесь

# Соедините my_data с данными о смерти автора из authors, 
# так чтобы к my_data добавился новый столбец. 
# После этого используйте функцию separate, 
# чтобы разделить столбец с именем и фамилией на два новых: author, name. 
# Удалите столбец с именем автора, оставив только фамилию.
# Добавьте новый столбец century, 
# используя функцию mutate и данные из столбца deathdate. 
# Используйте оператор pipe, не сохраняйте промежуточные результаты!

my_data %>% 
  # ваш код здесь
  
```


## Пример: буккроссинг

### Смотрим на данные

Загрузим пример неопрятных данных и попробуем их преобразовать для анализа. [Book-Crossing](https://www.kaggle.com/datasets/ruchi798/bookcrossing-dataset) -- датасет с рейтингами миллионов книг и обезличенными демографическими данными о более 250 тысячах их читателей. Этот датасет хранится в трех разных файлах, которые надо скачать архивом [отсюда](https://github.com/locusclassicus/text_analysis_2024/raw/main/files/BX.zip). Распечатайте архив, прежде чем выполнять код ниже. 


```{r eval=FALSE}
ratings <- read_delim("../files/BX/BX-Book-Ratings.csv", delim = ";")
ratings

books <- read_delim("../files/BX/BX_Books.csv", delim = ";")
books

users <- read_delim("../files/BX/BX-Users.csv", delim = ";")
users
```

```{r eval=FALSE}
save(users, file = "../data/UsersBX.Rdata")
save(books, file = "../data/BooksBX.Rdata")
save(ratings, file = "../data/RatingsBX.Rdata")
```
 
```{r echo=FALSE}
load("../data/BooksBX.Rdata")
load("../data/RatingsBX.Rdata")
load("../data/UsersBX.Rdata")
```

```{r}
head(ratings)
head(users)
head(books)
```

Что не так с этими данными?

:::{.callout-tip icon=false collapse=true}
## Нажмите, чтобы увидеть подсказку
-   `users` содержит больше одного значения в столбце Location
-   много отсутствующих значений
-   данные вводятся самими пользователями через сайт <https://www.bookcrossing.com/> ; они могут содержать недостоверную информацию, см. напр. `moscow, yukon territory, russia` (Юкон -- это территория Канады).
-   Age представляет собой строку и др.
:::


Прежде чем начинать преобразование, надо сформулировать примерный вопрос и понять, что для нас важно, а что нет.

:::{.callout-tip icon=false collapse=true}
## Нажмите, чтобы увидеть подсказку
- Сколько читателей старше 30 лет пользуются сервисом в Австралии? 
- В какие года опубликованы самые популярные книги? 
- Кто популярнее у читателей, Роулинг или Толкин?
- Какой процент пользователей никогда не оставляет отзывы?
- Есть ли связь между возрастом и количеством оценок?
и т.п.
:::

Чтобы объединить данные, надо понять, через какие переменные они связаны.

:::{.callout-tip icon=false collapse=true}
## Нажмите, чтобы увидеть подсказку
Ответ: `ratings` и `books` связаны через переменную `isbn`, `ratings` и `users` связаны через переменную `User-ID`.
:::

### Трансформируем данные

Начнем с пользователей.

```{r warning=FALSE}
users_separated <- users %>% 
  mutate(Age = as.numeric(Age)) %>%
  filter(!is.na(Age))  %>% # drop_na(Age) тоже решил бы нашу задачу
  separate(Location, into = c(NA, NA, "country"), sep = ",")

head(users_separated) # можно было бы не сохранять, но так нагляднее
```

Здесь можно сразу посмотреть, из каких стран и какого возраста пользователи.

```{r}
users_separated %>% 
  group_by(country) %>%
  count() %>% 
  arrange(-n)
```
Последние ряды этого тибла выглядят достаточно причудливо:

```{r}
users_separated %>% 
  group_by(country) %>%
  count() %>% 
  arrange(n)
```

Здесь возможно несколько стратегий. Можно выбрать все ряды с названиями реальных стран либо (если это соответствует исследовательской задаче) какую-то одну страну. Можно и проигнорировать, если происхождение пользователей не так важно.

Допустим, мы решаем сосредоточиться на Испании. Обратите внимание, что в название страны после разделения функцией `separate()` попали пробелы, и от них надо избавиться. Это делается при помощи регулярных выражений (о них в другой раз) и функции `mutate()`.

```{r}
spain_data <- users_separated %>%
  mutate(country = str_replace_all(country, pattern = "\\s+", "")) %>% # это означает, что пробел мы меняем на "ничто", т.е. убираем
  filter(country == "spain") %>% 
  group_by(Age) %>%
  count() %>% 
  arrange(-n)

head(spain_data)
```

Столбиковая диаграмма подходит для визуализации подобных данных:

```{r}
spain_data %>% 
  ggplot(aes(Age, n)) + 
  geom_bar(stat = "identity", col = "blue", fill = "white") +
  theme_bw()
```

Какие целеустремленные испанцы! Читают от 0 до 183 лет 😵

После того, как мы убрали лишние пробелы из названий стран, можно фильтровать:

```{r}
spain_id <- users_separated %>%
  mutate(country = str_replace_all(country, pattern = "\\s+", "")) %>%
  filter(country == "spain") # на этот раз мы не считаем число наблюдений в группе, а забираем все ряды, которые отвечают условию
```

```{r echo=F}
# для будущего анализа
# book_crossing <- users_separated %>%
#   mutate(country = str_replace_all(country, pattern = "\\s+", "")) %>% 
#   left_join(ratings) %>% 
#   left_join(books) %>% 
#   select(-contains("URL"), -matches("Publisher")) %>% 
#   rename(title = `Book-Title`, 
#          author = `Book-Author`,
#          published = `Year-Of-Publication`,
#          rating = `Book-Rating`)

#save(book_crossing, file = "data/Bookcrossing.Rdata")
```

### Объединяем данные

Мы уже выяснили, что `ratings` и `users` связаны через переменную `User-ID`, и в `ratings` хотели бы оставить только те id, которые отвечают заданному условию (страна, возраст и т.п.). Для такого рода объединений как раз подходят функции `_join`^[https://r4ds.had.co.nz/relational-data.html].

[Функции семейства _join](https://d33wubrfki0l68.cloudfront.net/9c12ca9e12ed26a7c5d2aa08e36d2ac4fb593f1e/79980/diagrams/join-outer.png){ width=70% }


```{r}
spain_ratings <- spain_id %>% 
  left_join(ratings) %>% 
  filter(!is.na(ISBN)) %>% 
  filter(`Book-Rating` > 7) %>% # имена синтаксически неправильные, поэтому требуется знак "`"
  group_by(ISBN) %>% 
  count() %>% 
  arrange(-n)

spain_ratings
```

Осталось выяснить, что это за книги. Для этого объединяем `spain_ratings` и `books`. 

```{r message=FALSE}
spain_books <- spain_ratings %>% 
  filter(n > 2) %>% 
  left_join(books) %>% 
  filter(!is.na(`Book-Title`), !is.na(`Book-Author`)) %>% 
  ungroup()

spain_books
```

Как минимум мы выяснили, что испанцы предпочитают читать по-испански! (Здесь снова можно подумать. Возможно, у одной книги разные ISBN, и стоило группировать не по ISBN, а по названию или автору?)

Осталось избавиться от неинформативных столбцов (это ссылки, часто битые, на изображения обложки). Если мы знаем номера этих столбцов, то это можно сделать по индексу:


```{r}
spain_books %>% 
  select(3:5) %>% 
  rename(title = `Book-Title`, author = `Book-Author`)
```

Однако у `select()` есть функции-помощники^[https://r4ds.had.co.nz/transform.html], которые подходят для таких случаев:

- `starts_with()`
- `ends_with()`
- `contains()`
- `matches()`
- `num_range()`

```{r}
spain_books %>% 
  select(-contains("URL"), -matches("Publisher")) %>% # удалим заодно и издателя
  rename(title = `Book-Title`, 
         author = `Book-Author`,
         published = `Year-Of-Publication`) # чиним имена
```

Ура! Еще один сложный урок позади. Похвалите себя. 

![](https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExZzFieW5lM21iMW41cTZpcWJ4OTV6Z2ZrMndocWo3cHBod2ZvZ3VldCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/qYGvebgOKGygdQgflY/giphy.gif)
